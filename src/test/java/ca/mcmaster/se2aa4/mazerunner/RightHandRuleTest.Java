package ca.mcmaster.se2aa4.mazerunner;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;


public class RightHandRuleTest {
    private RightHandRule rightHandRule;
    private Player player;
    private Maze maze;
    // from https://docs.oracle.com/javase/8/docs/api/java/io/ByteArrayOutputStream.html
    private static final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    private static final PrintStream originalOut = System.out;

    @BeforeEach
    void setUp() {
        rightHandRule = new RightHandRule();
        System.setOut(new PrintStream(outputStream));
    }

    @Test
    void test_largeMaze() {
        String mazeFilepath = "examples/large.maz.txt";
        maze = new Maze(mazeFilepath);
        player = new Player(maze.findEntrance());

        String expectedPath = "FR8F2L2FR2FR4FR2F2L2FR2FR2F2L2FR2FR2FL8F2L6FR2FR4F2L4FL2FR2FR4FR8FR2FL2FR2FL2F2L2FR2FR2F2L4FR2FL2FR2F2L2FR4FR2FR2F2L2FL2FR2FL2FR8FR4FR2FR2FL2F2L2FR4FR2FR2FL2FR2F2L2FR2F2L4FR2FR4F2L4FR2FR6FR2FL2F2L2FR2FR4FR2F2L2FR2FR4FL2FR2F2L2FL2FR4FR4FR2FR2F2L2FR4FL2F2L2FR2FR4FR4FR2FL2F2L2FR2FR2FL4F2L4FR2FR2F2L2FR2FR6FR2FR2F2L2FR2FL6F2L6FR4FR2FR2FL4F2L4FR2FL2FR2F2L2FR6FR2FR2F2L6FR4FR2FR2FL6FR2F2L2FL6FR2FR8FR2FL2F2L2FR2FR2F2L2FR2FR2F2L2FL2FR8FR2FR2F2L2FR2FR4FR2FL2F2L2FR2FL2FR2FR4FR2FL2F2L2FR2FL2FR2FR4FR2F2L4FR2FR4F2L2FR2FR2F2L2FR2FR4FR4F2L2FR4FL2FR2FR2FL2FR2F2L2FR2FL2F2L2FR4FR2FR2FL2FR6FL4F2L4FR2FR4F2L4FR2FR2F2L2FR2FL2FR2FR4FR2FL2FR2F2L2FL2FR2FR2F2L6FR2FR2F2L2FR2F2L2FR2FR4FR4FR2FL2FR2FL2F2L2FR2FR2F2L4FR2FR4F2L2FR2FR2F2L2FL2FR4FR4FR2FR2F2L2FR4F2L4FR2FR4FL2F2L2FR4FR2FR2F2L2FR2FR2F2L2FR2FR4FR2F2L2FL4FR2FR4F2L2FR2FR2FL8F2L2FR2FL2F2L2FR2FR6FR2FR2F2L4FR2FR2F2L4FR2FR6FR2F2L2FR2FR2F2L4FR2FR4F2L4FR2FR6F2L4FR2FR6F2L2FR2FR2F2L2FL2FR4FR2FR2F2L2FR2FR6FL4F2L2FR2F2L2FR2FR6FL2FR2FR4FR4FL2FR2F2L2FL2FR6FR2FR4F2L4FL2FL2FR4FL2FR2FR2F2L2FR2FR4F2L2FR2FR4F2L2FR2F2L2FR2FR2FL2FR6FR2F2L2FR2FR2F2L2FR2FR2F2L2FL2FR2FR4FR2F2L2FR4FR6FR2FR4F2L4FR2FR2F2L2FR2F2L4FR2FR2F2L4FR2FR2F2L2FR2FL2FR2FR4FR2F2L4FR2FR2F2L2FR2FR4FR2FL2F2L2FR2FR4FL2FR2F2L2FR2FR2F2L2FR2FR4F2L4FR2FR4F2L4FL6FR2FR2F2L2FL2FR2FR8FR2FR4F2L2FR2FR2F2L4FR2F2L2FL2FR2FR4F2L2FR2FR4FR2F2L2FL2FR2F2L2FR2FR4FL2FR2FR2FL2F2L2FR2FR4FR2FL4FR6FR2FR4F2L4FR2FR4F2L2FR2FR2F2L2FR2FR2F2L2FL4FR2FR2F2L6FR6FR2FR4F2L4FL2FR4FR2FR2F2L2FR2FR8F2L4FR2FR4F2L2FR2FR2F2L2FL2FR2FR4FR6FR2F2L2FR4F2L4FR2FR2F2L2FR2F2L4FR2FR2F2L2FR4FL6FR2FR4F2L4FR2FL4FR2FR6FR2F2L4F2L2FR8FR2FR4F2L6FR2FR2F2L4FR2FR2F2L2FL2FR4FR4FR2FR2F2L2FR2F2L4FR2FR6FR2F2L2FR2FR4F2L4FR2FR6F2L6FR2FR2F2L2FR2FR4FR2FL2F2L2FR2FR4F2L6FR2FR4F2L4FR2FR2F2L2FR2FR4FR2F2L2FR2FR2FL4F2L4FR2FR6F2L6FR2FR8FL2FR2FR2F2L2FR2F2L2FR2FR2F2L2FL2FR2FL2FR6FR2FR4FL2FR2F2L2FL2FR4FR2FR2F2L2FR2FR4F2L4FL4FR2FR2F2L2FL2FR2FR4FR2F2L2FL2FR2FR6FR2FR2FL4FR2FL4FR2FR2F2L2FR8FR2FL4F2L4FR4FR2FR2F2L2FR2FR2F2L2FR2FR6F2L4FR2FR2FL2F2L2FR2FR2F2L4FR2FR4F2L4FR2FR6FR2F2L2FR4FR2FR2F2L2FR2FR2F2L4F2L2FR2FR2F2L2FR2FR4F2L2FR2F2L2FR12FR4FR2FR2F2L2FR2FR2FL4F2L4FR2FR6FR2F2L2FR4F2L10FR2FR8F2L2FR2FR4FR2F2L2FR2FR2F2L2FL2FR2FR2F2L2FL2FR4FL2FR6FR2FR2F2L2FL2FR2FR4FR6FR2F2L2FR4F2L6FR2F2L2FR4FL4FL2FR2FR4FR2F2L4FR2FR2F2L2FL2FR4FR4FR2FR2F2L2FR2F2L4FR2FR2F2L4FR2FR4F2L4FR4FR2FR2F2L2FR2FR2F2L2FR2FR6F2L4FR2FR6F2L4FR2FR6F2L4FR2FR4F2L2FR2FR4FR2F2L2FL2FR2FR6FL2FR6FR2FR2F2L6F2L4FR2FR4F2L12FRF"; //expected factorized path for the large maze
        rightHandRule.findPath(player, maze);

        String output = outputStream.toString().trim();

        assertEquals(expectedPath, output);
    }

    @Test
    void test_mediumMaze() {
        String mazeFilepath = "examples/medium.maz.txt";
        maze = new Maze(mazeFilepath);
        player = new Player(maze.findEntrance());

        String expectedPath = "FR6F2L8FR2FR2F2L2FR2FR4FR2FL4FL2F2L2FR4FR2FL2FR2FR4FR2F2L2FL2FR2FR4FR2F2L2FL2FR2F2L2FR2FR2F2L4FR2FR2F2L4FR2FR2F2L4FR2FR2F2L2FR10FR2FR8F2L8FL2FR4FR2FR2F2L2FR2FR14F2L12FR2FR6F2L4FR2FR6FR2FL6F2L6FR2FR8F2L12FR2FR10F2L6FR2FR4F2L4FL2FR4FL2FR2FL2FR2FL2FR2FL4FR2FR2F2L4FR2FR6FR2F2L2FR2FR4F2L2FR2FR4F2L4FR2FR2F2L2FR2FR4FR2FL2F2L2FR2FR6FL2FR8F2L8FR2FR10FR4FR2F2L2FR2F2L2FR2FR2FL4FR2F2L4F2L2FR4FR2FR2F2L4FR2FR6F2L6FR4FR2FR2FL2F2L2FR4FR2FR2F2L2FR2FR4F2L4FL4FR2FR4F2L2FR2F2L2FR2FR2F2L6FR2FR8FR6FR2F2L2FL2FRF"; //expected factorized path for the medium maze
        rightHandRule.findPath(player, maze);

        String output = outputStream.toString().trim();

        assertEquals(expectedPath, output);
    }


    @Test
    void test_smallMaze() {
        String mazeFilepath = "examples/small.maz.txt";
        maze = new Maze(mazeFilepath);
        player = new Player(maze.findEntrance());

        String expectedPath = "FRF2L2FR2FR2F2L4FR2FR4F2L2FR4FR2FR2F2L2FL2FL4FR2FR2F2L4FR2FR2F2L2FR2FR4FR2FL2FR2FLF"; //expected factorized path for the small maze
        rightHandRule.findPath(player, maze);

        String output = outputStream.toString().trim();

        assertEquals(expectedPath, output);
    }

    @Test
    void test_straightMaze() {
        String mazeFilepath = "examples/straight.maz.txt";
        maze = new Maze(mazeFilepath);
        player = new Player(maze.findEntrance());

        String expectedPath = "4F"; //expected factorized path for the straight maze
        rightHandRule.findPath(player, maze);

        String output = outputStream.toString().trim();

        assertEquals(expectedPath, output);
    }

    @AfterEach
    void tearDown() {
        outputStream.reset();
        System.setOut(originalOut);
    }
}
